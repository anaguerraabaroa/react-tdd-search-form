{"version":3,"sources":["components/content/index.js","components/github-table/index.js","services/index.js","components/github-search-page/github-search-page.js","components/error-boundary/error-boundary.js","App.js","index.js"],"names":["Content","isSearchApplied","reposList","children","renderWithBox","cb","Box","display","alignItems","justifyContent","height","length","Typography","color","tableHeaders","useStyles","makeStyles","container","maxHeight","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","textTransform","fontWeight","textAlign","body","TableCell","GithubTable","classes","TableContainer","className","Table","stickyHeader","TableHead","TableRow","map","header","TableBody","name","id","stargazersCount","stargazers_count","forksCount","forks_count","openIssuesCount","open_issues_count","updatedAt","updated_at","htmlUrl","html_url","avatarUrl","owner","avatar_url","flexDirection","Avatar","alt","src","Link","href","getRepos","q","rowsPerPage","currentPage","fetch","process","StyledButton","root","Button","CssTextField","borderBottomColor","TextField","GithubSearchPage","useState","isSearching","setIsSearching","setIsSearchApplied","setReposList","setRowsPerPage","setCurrentPage","totalCount","setTotalCount","isOpen","setIsOpen","errorMessage","setErrorMessage","didMount","useRef","searchByInput","handleSearch","useCallback","a","current","value","response","ok","json","data","items","total_count","message","useEffect","Container","my","fontSize","variant","component","align","m","Grid","spacing","justify","item","md","xs","inputRef","fullWidth","label","disabled","onClick","TablePagination","rowsPerPageOptions","count","page","onChangePage","event","newPage","onChangeRowsPerPage","target","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ErrorBoundary","props","handleReloadClick","window","location","reload","state","hasError","this","type","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08bf5bbc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n// render content: table, error message or initial message\r\nexport const Content = ({isSearchApplied, reposList, children}) => {\r\n  const renderWithBox = cb => (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      height={500}\r\n    >\r\n      {cb}\r\n    </Box>\r\n  )\r\n\r\n  if (isSearchApplied && !!reposList.length) {\r\n    return children\r\n  }\r\n  if (isSearchApplied && !reposList.length) {\r\n    return renderWithBox(() => (\r\n      <Typography color=\"error\">Your search has no results</Typography>\r\n    ))\r\n  }\r\n\r\n  return renderWithBox(() => (\r\n    <Typography>\r\n      Please provide a search option and click in the search button\r\n    </Typography>\r\n  ))\r\n}\r\n\r\nexport default Content\r\n\r\nContent.propTypes = {\r\n  isSearchApplied: PropTypes.bool.isRequired,\r\n  reposList: PropTypes.arrayOf(PropTypes.object),\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {withStyles, makeStyles} from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Link from '@material-ui/core/Link'\r\nimport Box from '@material-ui/core/Box'\r\n\r\n// tableHeaders array\r\nconst tableHeaders = [\r\n  'Repository',\r\n  'Stars',\r\n  'Forks',\r\n  'Open issues',\r\n  'Updated at',\r\n]\r\n\r\n// customize material UI styles\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n})\r\n\r\nconst StyledTableCell = withStyles(theme => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    textTransform: 'uppercase',\r\n    fontWeight: 700,\r\n    textAlign: 'center',\r\n  },\r\n  body: {\r\n    color: theme.palette.common.black,\r\n    textAlign: 'center',\r\n  },\r\n}))(TableCell)\r\n\r\nexport const GithubTable = ({reposList}) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <TableContainer className={classes.container}>\r\n      <Table stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            {tableHeaders.map(header => (\r\n              <StyledTableCell key={header}>{header}</StyledTableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {reposList.map(\r\n            ({\r\n              name,\r\n              id,\r\n              stargazers_count: stargazersCount,\r\n              forks_count: forksCount,\r\n              open_issues_count: openIssuesCount,\r\n              updated_at: updatedAt,\r\n              html_url: htmlUrl,\r\n              owner: {avatar_url: avatarUrl},\r\n            }) => (\r\n              <TableRow key={id}>\r\n                <StyledTableCell>\r\n                  <Box\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    flexDirection=\"column\"\r\n                  >\r\n                    <Avatar alt={name} src={avatarUrl} />\r\n                    <Link href={htmlUrl}>{name}</Link>\r\n                  </Box>\r\n                </StyledTableCell>\r\n\r\n                <StyledTableCell>{stargazersCount}</StyledTableCell>\r\n                <StyledTableCell>{forksCount}</StyledTableCell>\r\n                <StyledTableCell>{openIssuesCount}</StyledTableCell>\r\n                <StyledTableCell>{updatedAt}</StyledTableCell>\r\n              </TableRow>\r\n            ),\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nexport default GithubTable\r\n\r\nGithubTable.propTypes = {\r\n  reposList: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n","// base url can return a relative path in test and an absolute path in production\r\nconst baseUrl =\r\n  process.env.NODE_ENV === 'test' ? '' : process.env.REACT_APP_BASE_URL\r\n\r\n// fetch API request\r\nexport const getRepos = ({q, rowsPerPage, currentPage}) =>\r\n  fetch(\r\n    `${baseUrl}/search/repositories?q=${q}&page=${currentPage}&per_page=${rowsPerPage}`,\r\n  )\r\n\r\nexport default {\r\n  getRepos,\r\n}\r\n","import React, {useState, useEffect, useCallback, useRef} from 'react'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Box from '@material-ui/core/Box'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\n\r\nimport {Content} from '../content/index'\r\nimport {GithubTable} from '../github-table'\r\nimport {getRepos} from '../../services'\r\n\r\n// initial values variables\r\nconst ROWS_PER_PAGE_DEFAULT = 30\r\nconst INITIAL_CURRENT_PAGE = 0\r\nconst INITIAL_TOTAL_COUNT = 0\r\n\r\n// customize material UI styles\r\nconst StyledButton = withStyles(theme => ({\r\n  root: {\r\n    color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}))(Button)\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'black',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'black',\r\n    },\r\n  },\r\n})(TextField)\r\n\r\nexport const GithubSearchPage = () => {\r\n  // state\r\n  const [isSearching, setIsSearching] = useState(false)\r\n  const [isSearchApplied, setIsSearchApplied] = useState(false)\r\n  const [reposList, setReposList] = useState([])\r\n  const [rowsPerPage, setRowsPerPage] = useState(ROWS_PER_PAGE_DEFAULT)\r\n  const [currentPage, setCurrentPage] = useState(INITIAL_CURRENT_PAGE)\r\n  const [totalCount, setTotalCount] = useState(INITIAL_TOTAL_COUNT)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n\r\n  const didMount = useRef(false)\r\n  const searchByInput = useRef(null)\r\n\r\n  // event click handler\r\n  const handleSearch = useCallback(async () => {\r\n    try {\r\n      // when button receives the event, an API request is sent and the button is disabled\r\n      setIsSearching(true)\r\n\r\n      // once the promise is resolved, the button is enabled again and table is displayed\r\n      const response = await getRepos({\r\n        q: searchByInput.current.value,\r\n        rowsPerPage,\r\n        currentPage,\r\n      })\r\n\r\n      // validate server errors\r\n      if (!response.ok) {\r\n        throw response\r\n      }\r\n\r\n      // success response\r\n      const data = await response.json()\r\n\r\n      setReposList(data.items)\r\n      setTotalCount(data.total_count)\r\n      setIsSearchApplied(true)\r\n      setIsSearching(false)\r\n    } catch (err) {\r\n      // error response\r\n      const data = await err.json()\r\n      setIsOpen(true)\r\n      setErrorMessage(data.message)\r\n    } finally {\r\n      // whatever the server response is success or error, it confirms that the search has finished\r\n      setIsSearching(false)\r\n    }\r\n  }, [rowsPerPage, currentPage])\r\n\r\n  // event handlers\r\n  const handleChangeRowsPerPage = ({target: {value}}) => {\r\n    setCurrentPage(INITIAL_CURRENT_PAGE)\r\n    setRowsPerPage(value)\r\n  }\r\n  const handleChangePage = (event, newPage) => {\r\n    setCurrentPage(newPage)\r\n  }\r\n\r\n  const handleClickSearch = () => {\r\n    if (currentPage === INITIAL_CURRENT_PAGE) {\r\n      handleSearch()\r\n      return\r\n    }\r\n    setCurrentPage(INITIAL_CURRENT_PAGE)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // stop search when component is mounted for the first time\r\n    if (!didMount.current) {\r\n      didMount.current = true\r\n      return\r\n    }\r\n    // trigger search when search button is clicked\r\n    handleSearch()\r\n  }, [handleSearch])\r\n\r\n  return (\r\n    <Container>\r\n      <Box\r\n        my={12}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        flexDirection=\"row\"\r\n      >\r\n        <GitHubIcon fontSize=\"large\" />\r\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n          <Box m={4}>Github Repositories List </Box>\r\n        </Typography>\r\n        <GitHubIcon fontSize=\"large\" />\r\n      </Box>\r\n\r\n      <Grid container spacing={2} justify=\"space-between\">\r\n        <Grid item md={6} xs={12}>\r\n          <CssTextField\r\n            inputRef={searchByInput}\r\n            fullWidth\r\n            label=\"Filter by\"\r\n            id=\"filterby\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item md={3} xs={12}>\r\n          <StyledButton\r\n            fullWidth\r\n            disabled={isSearching}\r\n            onClick={handleClickSearch}\r\n            variant=\"contained\"\r\n          >\r\n            Search\r\n          </StyledButton>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Box my={4}>\r\n        <Content isSearchApplied={isSearchApplied} reposList={reposList}>\r\n          <>\r\n            <GithubTable reposList={reposList} />\r\n            <TablePagination\r\n              rowsPerPageOptions={[30, 50, 100]}\r\n              component=\"div\"\r\n              count={totalCount}\r\n              rowsPerPage={rowsPerPage}\r\n              page={currentPage}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </>\r\n        </Content>\r\n      </Box>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        open={isOpen}\r\n        autoHideDuration={6000}\r\n        onClose={() => setIsOpen(false)}\r\n        message={errorMessage}\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default GithubSearchPage\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nexport class ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {hasError: false}\r\n  }\r\n\r\n  // lifecycle that keep in cache when the error happens\r\n  static getDerivedStateFromError() {\r\n    return {hasError: true}\r\n  }\r\n\r\n  // event handler\r\n  handleReloadClick = () => window.location.reload()\r\n\r\n  render() {\r\n    const {children} = this.props\r\n    const {hasError} = this.state\r\n    if (hasError) {\r\n      return (\r\n        <>\r\n          <Typography variant=\"h4\">There is an unexpected error</Typography>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={this.handleReloadClick}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Reload\r\n          </Button>\r\n        </>\r\n      )\r\n    }\r\n    return children\r\n  }\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React from 'react'\n\nimport {GithubSearchPage} from './components/github-search-page'\nimport {ErrorBoundary} from './components/error-boundary/index'\n\nfunction App() {\n  return (\n    <>\n      <ErrorBoundary>\n        <GithubSearchPage />\n      </ErrorBoundary>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}